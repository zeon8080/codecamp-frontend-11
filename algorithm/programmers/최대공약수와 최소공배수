; 최대공약수와 최소공배수
; 문제 설명
; 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

; 제한 사항
; 두 수는 1이상 1000000이하의 자연수입니다.
; 입출력 예
; n	m	return
; 3	12	[3, 12]
; 2	5	[1, 10]

function solution(n, m) {
    // 최대공약수 : 두 수의 공통되는 약수 중에서 제일 큰 수
    // 최소공배수 : 두 수의 공통되는 배수 중에서 제일 작은 수
    // const biggest = n > m ? n : m; // 두 수 중에서 가장 큰 값을 저장하는 상수
    const biggest = Math.max( n, m );
    
    // 최대공약수 구하기
    let max = 0; // 공약수 중에서 제일 큰 수만 저장하는 변수
    for( let i = 1; i <= biggest; i++ ) {
        if( n % i === 0 && m % i === 0 ) {
            // 두 수를 i로 나눴을 때 둘다 나누어 떨어지는 경우 (= 공약수)
            max = i;
        }
    }
    
    // 최소공배수 구하기
    let min = 0; // 공배수 중에서 제일 작은 수만 저장하는 변수
    for( let i = biggest; i <= n * m; i += biggest ) {
        if( i % Math.min( n, m ) === 0 ) {
            // i를 제일 작은 수로 나눴을 때 나누어 떨어진다면 = (i는 제일 작은 수의 배수)
            min = i;
            break;
        }
    }
    return [ max, min ];
}

function solution(n, m) {
    // 최대공약수 구하는 공식
    // 유클리드 호제법
    
    // a를 b로 나눴을 때 (a가 b보다 클 경우) === 큰 수를 작은 수로 나눴을 때
    // 나머지(r) 값이 0이 되면, 나눴던 작은 수(b)가 최대공약수가 된다.
    // 나머지(r) 값이 0이 되지 않으면, 큰 수(a)에 작은 수(b)가 들어오고
    // 작은 수(b)에는 나머지(r) 값이 들어간다.
    // 나누기를 반복했을 때에 나머지 값이 0이 되면 나눴던 작은 수(b)가 최대공약수가 된다.
    
    let a = Math.max(n, m); // 큰 수
    let b = Math.min(n, m); // 작은 수
    let r = 0; // a와 b를 나눈 나머지 값
    
    while( a % b > 0 ) {
        r = a % b; // 큰 수에서 작은 수를 나눴을 때 나온 나머지 값
        a = b; // 큰 수에 작은 수를 재할당
        b = r; // 작은 수에 나머지 값 재할당
    }
    // 최소공배수는 두 수를 곱한 값에 최대공약수를 나눠준 몫의 값
    return [ b, ( n * m ) / b ]
}